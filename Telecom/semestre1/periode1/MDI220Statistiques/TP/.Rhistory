install.packages("rmarkdown")
install.packages("markdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
1 + 1
data("iris")
data("iris")
dim(iris) ; names(iris)
names(iris)[1]
i = 1
j = 3
plot(iris[,i],iris[,j],xlab = names(iris)[i],ylab = names(iris)[j])
1+1
1&1
1&&1
data("iris")
data("iris")
dim("iris")
dim(iris);names(iris)
plot(iris[,1],iris[,3])
print("example calculation");
apples = 3 ;
pears = 8;
result = apples + pears ;
result
## This is comment line
#' This is another comment line. What is the difference?
source('C:/Users/ntame/Desktop/Telecom/semestre1/periode1/MDI220Statistiques/TP/myScript.R', echo=TRUE)
#' This is another comment line. What is the difference?
#' This is another comment line. What is the difference?
clearPushBack()
clear
## This is comment line
#' This is another comment line. What is the difference?
## This is comment line
#' This is another comment line. What is the difference?
source('C:/Users/ntame/Desktop/Telecom/semestre1/periode1/MDI220Statistiques/TP/myScript.R', echo=TRUE)
source('C:/Users/ntame/Desktop/Telecom/semestre1/periode1/MDI220Statistiques/TP/myScript.R', echo=TRUE)
source('C:/Users/ntame/Desktop/Telecom/semestre1/periode1/MDI220Statistiques/TP/myScript.R', echo=TRUE)
source('C:/Users/ntame/Desktop/Telecom/semestre1/periode1/MDI220Statistiques/TP/myScript.R', echo=TRUE)
dnorm?
?fnorm
?dnorm
?distribution
set.seed(2) ## for reproducible results
X = rnorm(n = 100, mean = 5, sd = 0.3) ## random Gaussian data with:
##size n,
## mean 5
## std dev 0.3.
set.seed(2) ## for reproducible results
X = rnorm(n = 100, mean = 5, sd = 0.3) ## random Gaussian data with:
##size n,
## mean 5
## std dev 0.3.
X
xx = seq(-6 * pi, 6* pi, length.out = 100) ## grid for the x-axis
yy= sin(xx)*xx^2  ## The function to be plotted, evaluated on the grid.
plot(xx, yy  , type = "l") ## open a graphics window
##NB: If you delete the "type = 'l'" argument, you will get dots instead of the solid line.
lines(xx, 10 * cos(xx), col="red") ## To add a curve to an existing figure:
##  'lines' command.
## Add a legende
legend("topright", ## position of the legende
legend = c("Odd function", "even function"), ## text of the legende
lty=1,## to have the lines
col=c("black","red") ## color code
)
xx = seq(-6 * pi, 6* pi, length.out = 100) ## grid for the x-axis
yy= sin(xx)*xx^2  ## The function to be plotted, evaluated on the grid.
plot(xx, yy  , type ) ## open a graphics window
xx = seq(-6 * pi, 6* pi, length.out = 100) ## grid for the x-axis
yy= sin(xx)*xx^2  ## The function to be plotted, evaluated on the grid.
plot(xx, yy ) ## open a graphics window
##NB: If you delete the "type = 'l'" argument, you will get dots instead of the solid line.
lines(xx, 10 * cos(xx), col="red") ## To add a curve to an existing figure:
##  'lines' command.
## Add a legende
legend("topright", ## position of the legende
legend = c("Odd function", "even function"), ## text of the legende
lty=1,## to have the lines
col=c("black","red") ## color code
)
xx = seq(-6 * pi, 6* pi, length.out = 100) ## grid for the x-axis
yy= sin(xx)*xx^2  ## The function to be plotted, evaluated on the grid.
plot(xx, yy  , type = "l") ## open a graphics window
##NB: If you delete the "type = 'l'" argument, you will get dots instead of the solid line.
lines(xx, 10 * cos(xx), col="red") ## To add a curve to an existing figure:
##  'lines' command.
## Add a legende
legend("topright", ## position of the legende
legend = c("Odd function", "even function"), ## text of the legende
lty=1,## to have the lines
col=c("black","red") ## color code
)
xx = seq(-6 * pi, 6* pi, length.out = 100) ## grid for the x-axis
yy= sin(xx)*xx^2  ## The function to be plotted, evaluated on the grid.
plot(xx, yy  , type = "l") ## open a graphics window
##NB: If you delete the "type = 'l'" argument, you will get dots instead of the solid line.
lines(xx, 10 * cos(xx), col="red") ## To add a curve to an existing figure:
##  'lines' command.
## Add a legende
legend("topleft", ## position of the legende
legend = c("Odd function", "even function"), ## text of the legende
lty=1,## to have the lines
col=c("black","red") ## color code
)
xx = seq(-6 * pi, 6* pi, length.out = 100) ## grid for the x-axis
yy= sin(xx)*xx^2  ## The function to be plotted, evaluated on the grid.
plot(xx, yy  , type = "l") ## open a graphics window
##NB: If you delete the "type = 'l'" argument, you will get dots instead of the solid line.
lines(xx, 10 * cos(xx), col="red") ## To add a curve to an existing figure:
##  'lines' command.
## Add a legende
legend("topright", ## position of the legende
legend = c("Odd function", "even function"), ## text of the legende
lty=1,## to have the lines
col=c("black","red") ## color code
)
